---
interface Props {
  solutions: {
    id: string
    title: string
  }[]
}

const { solutions } = Astro.props
---

<div class="solution-switcher">
  <div class="solution-tabs">
    {
      solutions.map((solution) => (
        <button class="solution-tab" data-solution-id={solution.id} data-active="false">
          {solution.title}
        </button>
      ))
    }
  </div>
  <div class="solution-content">
    <slot />
  </div>
</div>

<style>
  .solution-switcher {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .solution-tabs {
    display: flex;
    gap: 0.5rem;
    margin-left: 16rem;
    padding-left: 1rem;
    padding-bottom: 2rem;
  }

  .solution-tab {
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    border: 1px solid var(--color-amber-800-75, rgba(146, 64, 14, 0.75));
    transition: all 0.2s;
    cursor: pointer;
  }

  .dark .solution-tab {
    border-color: var(--color-amber-100, #fef3c7);
  }

  .solution-tab[data-active='true'] {
    background-color: var(--color-amber-800-75, rgba(146, 64, 14, 0.75));
    color: white;
  }

  .dark .solution-tab[data-active='true'] {
    background-color: var(--color-amber-100, #fef3c7);
    color: black;
  }

  .solution-content > :global(section) {
    display: none;
  }

  .solution-content > :global(section[data-active='true']) {
    display: block;
  }

  .solution-content {
    margin-bottom: 2rem;
  }
</style>

<script>
  function updateActiveSolution(id: string | null, updateHash = true, clickedTab?: Element) {
    // 只在需要更新hash时才更新URL
    if (updateHash && id) {
      // 找到当前点击的tab所在的switcher
      const switcher = clickedTab?.closest('.solution-switcher')
      if (switcher) {
        window.location.hash = id
        // 计算滚动位置，向上偏移100px
        const rect = switcher.getBoundingClientRect()
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop
        const targetPosition = rect.top + scrollTop - 100 // 向上偏移100px
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth',
        })
      } else {
        window.location.hash = id
      }
    }

    // 获取要更新的switcher
    const switcher = clickedTab?.closest('.solution-switcher') || document.querySelector('.solution-switcher')
    if (!switcher) {
      return
    }

    // 只更新当前switcher的按钮状态
    const tabs = switcher.querySelectorAll('.solution-tab')
    tabs.forEach((tab) => {
      const isActive = tab.getAttribute('data-solution-id') === id
      tab.setAttribute('data-active', isActive.toString())
    })

    // 只更新当前switcher的内容显示
    const sections = switcher.querySelectorAll('.solution-content > section')
    sections.forEach((section) => {
      const isActive = section.id === `${id}_section`
      section.setAttribute('data-active', isActive.toString())
    })
  }

  function init() {
    const hash = window.location.hash.slice(1)

    // 遍历switcher
    document.querySelectorAll('.solution-switcher').forEach((switcher) => {
      // 获取当前switcher的tabs
      const tabs = switcher.querySelectorAll('.solution-tab')
      const firstSolutionId = tabs[0]?.getAttribute('data-solution-id')

      // 获取当前switcher的所有solution ids
      const solutionIds = Array.from(tabs).map((tab) => tab.getAttribute('data-solution-id'))
      console.log(solutionIds)

      // 如果hash存在且不属于当前switcher，就显示第一个solution
      if (hash && !solutionIds.includes(hash)) {
        updateActiveSolution(firstSolutionId, false, tabs[0])
        return
      }

      // 如果有匹配的hash就用hash，否则用第一个solution的id
      const activeId = hash || firstSolutionId
      updateActiveSolution(activeId, false, tabs[0])
    })

    // 点击
    document.querySelectorAll('.solution-tab').forEach((tab) => {
      tab.addEventListener('click', () => {
        const id = tab.getAttribute('data-solution-id')
        updateActiveSolution(id, true, tab)
      })
    })

    // 监听hash
    window.addEventListener('hashchange', () => {
      const hash = window.location.hash.slice(1)
      // 遍历每个switcher
      document.querySelectorAll('.solution-switcher').forEach((switcher) => {
        // 获取当前switcher的tabs
        const tabs = switcher.querySelectorAll('.solution-tab')
        const firstSolutionId = tabs[0]?.getAttribute('data-solution-id')

        // 获取当前switcher的所有solution ids
        const solutionIds = Array.from(tabs).map((tab) => tab.getAttribute('data-solution-id'))

        // 如果hash存在且不属于当前switcher，就跳过
        if (hash && !solutionIds.includes(hash)) {
          return
        }

        // 如果有匹配的hash就用hash，否则用第一个solution的id
        const activeId = hash || firstSolutionId
        updateActiveSolution(activeId, false, tabs[0])
      })
    })
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init)
  } else {
    init()
  }
</script>
